{"ast":null,"code":"// src/services/boxService.js\nimport api from './api';\n\n// Box service for specific box-related API calls\nconst boxService = {\n  // Get all boxes\n  getAllBoxes: async () => {\n    const response = await api.get('/boxes');\n    return response.data;\n  },\n  // Get box by ID\n  getBoxById: async boxId => {\n    const response = await api.get(`/boxes/${boxId}`);\n    return response.data;\n  },\n  // Create a new box\n  createBox: async boxData => {\n    const response = await api.post('/boxes', boxData);\n    return response.data;\n  },\n  // Update a box\n  updateBox: async (boxId, boxData) => {\n    const response = await api.put(`/boxes/${boxId}`, boxData);\n    return response.data;\n  },\n  // Delete a box\n  deleteBox: async boxId => {\n    await api.delete(`/boxes/${boxId}`);\n  },\n  // Start a box\n  startBox: async boxId => {\n    const response = await api.post(`/boxes/${boxId}/start`);\n    return response.data;\n  },\n  // Stop a box\n  stopBox: async boxId => {\n    const response = await api.post(`/boxes/${boxId}/stop`);\n    return response.data;\n  },\n  // Get box status\n  getBoxStatus: async boxId => {\n    const response = await api.get(`/boxes/${boxId}/status`);\n    return response.data;\n  },\n  // Refresh box IP\n  refreshBoxIp: async boxId => {\n    const response = await api.post(`/boxes/${boxId}/refresh-ip`);\n    return response.data;\n  },\n  // Poll box status (with automatic reconnection)\n  pollBoxStatus: (boxId, callback, interval = 15000) => {\n    let isPolling = true;\n    const poll = async () => {\n      if (!isPolling) return;\n      try {\n        const data = await boxService.getBoxStatus(boxId);\n        callback(null, data);\n      } catch (error) {\n        callback(error, null);\n      }\n      if (isPolling) {\n        setTimeout(poll, interval);\n      }\n    };\n\n    // Start polling\n    poll();\n\n    // Return function to stop polling\n    return () => {\n      isPolling = false;\n    };\n  }\n};\nexport default boxService;","map":{"version":3,"names":["api","boxService","getAllBoxes","response","get","data","getBoxById","boxId","createBox","boxData","post","updateBox","put","deleteBox","delete","startBox","stopBox","getBoxStatus","refreshBoxIp","pollBoxStatus","callback","interval","isPolling","poll","error","setTimeout"],"sources":["/home/streamv3/frontend/src/services/boxService.js"],"sourcesContent":["// src/services/boxService.js\nimport api from './api';\n\n// Box service for specific box-related API calls\nconst boxService = {\n  // Get all boxes\n  getAllBoxes: async () => {\n    const response = await api.get('/boxes');\n    return response.data;\n  },\n  \n  // Get box by ID\n  getBoxById: async (boxId) => {\n    const response = await api.get(`/boxes/${boxId}`);\n    return response.data;\n  },\n  \n  // Create a new box\n  createBox: async (boxData) => {\n    const response = await api.post('/boxes', boxData);\n    return response.data;\n  },\n  \n  // Update a box\n  updateBox: async (boxId, boxData) => {\n    const response = await api.put(`/boxes/${boxId}`, boxData);\n    return response.data;\n  },\n  \n  // Delete a box\n  deleteBox: async (boxId) => {\n    await api.delete(`/boxes/${boxId}`);\n  },\n  \n  // Start a box\n  startBox: async (boxId) => {\n    const response = await api.post(`/boxes/${boxId}/start`);\n    return response.data;\n  },\n  \n  // Stop a box\n  stopBox: async (boxId) => {\n    const response = await api.post(`/boxes/${boxId}/stop`);\n    return response.data;\n  },\n  \n  // Get box status\n  getBoxStatus: async (boxId) => {\n    const response = await api.get(`/boxes/${boxId}/status`);\n    return response.data;\n  },\n  \n  // Refresh box IP\n  refreshBoxIp: async (boxId) => {\n    const response = await api.post(`/boxes/${boxId}/refresh-ip`);\n    return response.data;\n  },\n  \n  // Poll box status (with automatic reconnection)\n  pollBoxStatus: (boxId, callback, interval = 15000) => {\n    let isPolling = true;\n    \n    const poll = async () => {\n      if (!isPolling) return;\n      \n      try {\n        const data = await boxService.getBoxStatus(boxId);\n        callback(null, data);\n      } catch (error) {\n        callback(error, null);\n      }\n      \n      if (isPolling) {\n        setTimeout(poll, interval);\n      }\n    };\n    \n    // Start polling\n    poll();\n    \n    // Return function to stop polling\n    return () => {\n      isPolling = false;\n    };\n  },\n};\n\nexport default boxService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,UAAU,GAAG;EACjB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,UAAU,EAAE,MAAOC,KAAK,IAAK;IAC3B,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAUG,KAAK,EAAE,CAAC;IACjD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,SAAS,EAAE,MAAOC,OAAO,IAAK;IAC5B,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,QAAQ,EAAED,OAAO,CAAC;IAClD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,SAAS,EAAE,MAAAA,CAAOJ,KAAK,EAAEE,OAAO,KAAK;IACnC,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACY,GAAG,CAAC,UAAUL,KAAK,EAAE,EAAEE,OAAO,CAAC;IAC1D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,SAAS,EAAE,MAAON,KAAK,IAAK;IAC1B,MAAMP,GAAG,CAACc,MAAM,CAAC,UAAUP,KAAK,EAAE,CAAC;EACrC,CAAC;EAED;EACAQ,QAAQ,EAAE,MAAOR,KAAK,IAAK;IACzB,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,UAAUH,KAAK,QAAQ,CAAC;IACxD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAW,OAAO,EAAE,MAAOT,KAAK,IAAK;IACxB,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,UAAUH,KAAK,OAAO,CAAC;IACvD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAY,YAAY,EAAE,MAAOV,KAAK,IAAK;IAC7B,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAUG,KAAK,SAAS,CAAC;IACxD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAa,YAAY,EAAE,MAAOX,KAAK,IAAK;IAC7B,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,UAAUH,KAAK,aAAa,CAAC;IAC7D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAc,aAAa,EAAEA,CAACZ,KAAK,EAAEa,QAAQ,EAAEC,QAAQ,GAAG,KAAK,KAAK;IACpD,IAAIC,SAAS,GAAG,IAAI;IAEpB,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;MACvB,IAAI,CAACD,SAAS,EAAE;MAEhB,IAAI;QACF,MAAMjB,IAAI,GAAG,MAAMJ,UAAU,CAACgB,YAAY,CAACV,KAAK,CAAC;QACjDa,QAAQ,CAAC,IAAI,EAAEf,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdJ,QAAQ,CAACI,KAAK,EAAE,IAAI,CAAC;MACvB;MAEA,IAAIF,SAAS,EAAE;QACbG,UAAU,CAACF,IAAI,EAAEF,QAAQ,CAAC;MAC5B;IACF,CAAC;;IAED;IACAE,IAAI,CAAC,CAAC;;IAEN;IACA,OAAO,MAAM;MACXD,SAAS,GAAG,KAAK;IACnB,CAAC;EACH;AACF,CAAC;AAED,eAAerB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}