{"ast":null,"code":"var _jsxFileName = \"/home/streamv3/frontend/src/context/AppContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AppContext.jsx\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport api from '../services/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the context\nexport const useAppContext = () => {\n  _s();\n  return useContext(AppContext);\n};\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AppProvider = ({\n  children\n}) => {\n  _s2();\n  // State for boxes\n  const [boxes, setBoxes] = useState([]);\n  const [boxesLoading, setBoxesLoading] = useState(true);\n  const [boxesError, setBoxesError] = useState(null);\n\n  // State for viewers\n  const [viewers, setViewers] = useState([]);\n  const [viewersLoading, setViewersLoading] = useState(true);\n  const [viewersError, setViewersError] = useState(null);\n\n  // State for VPN configs\n  const [vpnConfigs, setVpnConfigs] = useState([]);\n  const [vpnLoading, setVpnLoading] = useState(true);\n  const [vpnError, setVpnError] = useState(null);\n\n  // Selected items\n  const [selectedBox, setSelectedBox] = useState(null);\n  const [selectedViewer, setSelectedViewer] = useState(null);\n\n  // Stats\n  const [stats, setStats] = useState({\n    totalBoxes: 0,\n    activeBoxes: 0,\n    totalViewers: 0,\n    activeViewers: 0,\n    errorBoxes: 0,\n    errorViewers: 0\n  });\n\n  // References for tracking initialization and preventing loops\n  const initialFetchDone = useRef(false);\n  const boxesInterval = useRef(null);\n  const viewersInterval = useRef(null);\n\n  // Update stats based on current data\n  const updateStats = useCallback(() => {\n    const activeBoxes = boxes.filter(box => box.status === 'running').length;\n    const errorBoxes = boxes.filter(box => box.status === 'error').length;\n    const activeViewers = viewers.filter(viewer => viewer.status === 'running').length;\n    const errorViewers = viewers.filter(viewer => viewer.status === 'error').length;\n    setStats({\n      totalBoxes: boxes.length,\n      activeBoxes,\n      totalViewers: viewers.length,\n      activeViewers,\n      errorBoxes,\n      errorViewers\n    });\n  }, [boxes, viewers]);\n\n  // Fetch all boxes - independent of viewers state\n  const fetchBoxes = useCallback(async () => {\n    try {\n      setBoxesLoading(true);\n      setBoxesError(null);\n      const response = await api.get('/boxes');\n      setBoxes(response.data);\n    } catch (error) {\n      console.error('Error fetching boxes:', error);\n      setBoxesError(error.message || 'Failed to fetch boxes');\n      toast.error('Failed to fetch boxes');\n    } finally {\n      setBoxesLoading(false);\n    }\n  }, []); // No dependencies\n\n  // Fetch all viewers - independent of boxes state\n  const fetchViewers = useCallback(async () => {\n    try {\n      setViewersLoading(true);\n      setViewersError(null);\n      const response = await api.get('/viewers');\n      setViewers(response.data);\n    } catch (error) {\n      console.error('Error fetching viewers:', error);\n      setViewersError(error.message || 'Failed to fetch viewers');\n      toast.error('Failed to fetch viewers');\n    } finally {\n      setViewersLoading(false);\n    }\n  }, []); // No dependencies\n\n  // Fetch all VPN configs\n  const fetchVpnConfigs = useCallback(async () => {\n    try {\n      setVpnLoading(true);\n      setVpnError(null);\n      const response = await api.get('/vpn/configs');\n      setVpnConfigs(response.data);\n    } catch (error) {\n      console.error('Error fetching VPN configs:', error);\n      setVpnError(error.message || 'Failed to fetch VPN configurations');\n      toast.error('Failed to fetch VPN configurations');\n    } finally {\n      setVpnLoading(false);\n    }\n  }, []);\n\n  // Initial data fetch - only run once\n  useEffect(() => {\n    const fetchAllData = async () => {\n      if (initialFetchDone.current) return;\n      try {\n        // Fetch data in parallel\n        const [boxesResponse, viewersResponse, vpnResponse] = await Promise.all([api.get('/boxes'), api.get('/viewers'), api.get('/vpn/configs').catch(error => {\n          console.error('Error fetching VPN configs:', error);\n          return {\n            data: []\n          };\n        })]);\n\n        // Update state\n        setBoxes(boxesResponse.data);\n        setViewers(viewersResponse.data);\n        setVpnConfigs(vpnResponse.data);\n\n        // Reset loading states\n        setBoxesLoading(false);\n        setViewersLoading(false);\n        setVpnLoading(false);\n\n        // Mark as initialized\n        initialFetchDone.current = true;\n      } catch (error) {\n        console.error('Error during initial data fetch:', error);\n        toast.error('Failed to load initial data');\n        setBoxesLoading(false);\n        setViewersLoading(false);\n        setVpnLoading(false);\n      }\n    };\n    fetchAllData();\n    return () => {\n      // Clear any pending intervals\n      if (boxesInterval.current) clearInterval(boxesInterval.current);\n      if (viewersInterval.current) clearInterval(viewersInterval.current);\n    };\n  }, []); // Run only once on mount\n\n  // Update stats whenever boxes or viewers change\n  useEffect(() => {\n    updateStats();\n  }, [boxes, viewers, updateStats]);\n\n  // Set up polling after initial data is loaded\n  useEffect(() => {\n    if (!initialFetchDone.current) return;\n\n    // Only set up polling intervals if they don't exist yet\n    if (!boxesInterval.current) {\n      // Increased polling interval from 10 seconds to 30 seconds\n      boxesInterval.current = setInterval(fetchBoxes, 30000);\n    }\n    if (!viewersInterval.current) {\n      // Increased polling interval from 10 seconds to 30 seconds\n      viewersInterval.current = setInterval(fetchViewers, 30000);\n    }\n    return () => {\n      if (boxesInterval.current) clearInterval(boxesInterval.current);\n      if (viewersInterval.current) clearInterval(viewersInterval.current);\n    };\n  }, [fetchBoxes, fetchViewers, initialFetchDone.current]);\n\n  // Box operations\n  const createBox = async boxData => {\n    try {\n      const response = await api.post('/boxes', boxData);\n      setBoxes(prevBoxes => [...prevBoxes, response.data]);\n      toast.success('Box created successfully');\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error creating box:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create box');\n      throw error;\n    }\n  };\n  const updateBox = async (boxId, boxData) => {\n    try {\n      const response = await api.put(`/boxes/${boxId}`, boxData);\n      setBoxes(prevBoxes => prevBoxes.map(box => box._id === boxId ? response.data : box));\n      toast.success('Box updated successfully');\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error updating box:', error);\n      toast.error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to update box');\n      throw error;\n    }\n  };\n  const deleteBox = async boxId => {\n    try {\n      await api.delete(`/boxes/${boxId}`);\n      setBoxes(prevBoxes => prevBoxes.filter(box => box._id !== boxId));\n      if ((selectedBox === null || selectedBox === void 0 ? void 0 : selectedBox._id) === boxId) {\n        setSelectedBox(null);\n      }\n      toast.success('Box deleted successfully');\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error deleting box:', error);\n      toast.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to delete box');\n      throw error;\n    }\n  };\n  const startBox = async boxId => {\n    try {\n      const response = await api.post(`/boxes/${boxId}/start`);\n\n      // Update the box status immediately to starting\n      setBoxes(prevBoxes => prevBoxes.map(box => box._id === boxId ? {\n        ...box,\n        status: 'starting'\n      } : box));\n      toast.info('Box is starting...');\n\n      // Update the selected box if it's the one being started\n      if ((selectedBox === null || selectedBox === void 0 ? void 0 : selectedBox._id) === boxId) {\n        setSelectedBox({\n          ...selectedBox,\n          status: 'starting'\n        });\n      }\n\n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchBoxes();\n        fetchViewers();\n      }, 3000);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error starting box:', error);\n      toast.error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to start box');\n      throw error;\n    }\n  };\n  const stopBox = async boxId => {\n    try {\n      const response = await api.post(`/boxes/${boxId}/stop`);\n\n      // Update the box status immediately to stopping\n      setBoxes(prevBoxes => prevBoxes.map(box => box._id === boxId ? {\n        ...box,\n        status: 'stopping'\n      } : box));\n      toast.info('Box is stopping...');\n\n      // Update the selected box if it's the one being stopped\n      if ((selectedBox === null || selectedBox === void 0 ? void 0 : selectedBox._id) === boxId) {\n        setSelectedBox({\n          ...selectedBox,\n          status: 'stopping'\n        });\n      }\n\n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchBoxes();\n        fetchViewers();\n      }, 3000);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error stopping box:', error);\n      toast.error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to stop box');\n      throw error;\n    }\n  };\n\n  // Viewer operations\n  const updateViewer = async (viewerId, viewerData) => {\n    try {\n      const response = await api.put(`/viewers/${viewerId}`, viewerData);\n      setViewers(prevViewers => prevViewers.map(viewer => viewer._id === viewerId ? response.data : viewer));\n\n      // Update the selected viewer if it's the one being updated\n      if ((selectedViewer === null || selectedViewer === void 0 ? void 0 : selectedViewer._id) === viewerId) {\n        setSelectedViewer(response.data);\n      }\n      toast.success('Viewer updated successfully');\n\n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchViewers();\n      }, 3000);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error updating viewer:', error);\n      toast.error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to update viewer');\n      throw error;\n    }\n  };\n  const stopViewer = async viewerId => {\n    try {\n      const response = await api.post(`/viewers/${viewerId}/stop`);\n\n      // Update the viewer status immediately to stopping\n      setViewers(prevViewers => prevViewers.map(viewer => viewer._id === viewerId ? {\n        ...viewer,\n        status: 'stopping'\n      } : viewer));\n      toast.info('Viewer is stopping...');\n\n      // Update the selected viewer if it's the one being stopped\n      if ((selectedViewer === null || selectedViewer === void 0 ? void 0 : selectedViewer._id) === viewerId) {\n        setSelectedViewer({\n          ...selectedViewer,\n          status: 'stopping'\n        });\n      }\n\n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchViewers();\n      }, 3000);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Error stopping viewer:', error);\n      toast.error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to stop viewer');\n      throw error;\n    }\n  };\n  const takeViewerScreenshot = async viewerId => {\n    try {\n      const response = await api.post(`/viewers/${viewerId}/screenshot`);\n      toast.success('Screenshot taken successfully');\n\n      // Update the selected viewer if it's the one being screenshotted\n      if ((selectedViewer === null || selectedViewer === void 0 ? void 0 : selectedViewer._id) === viewerId) {\n        fetchViewerDetails(viewerId);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('Error taking viewer screenshot:', error);\n      toast.error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to take screenshot');\n      throw error;\n    }\n  };\n\n  // VPN operations\n  const testVpnConnection = async configName => {\n    try {\n      const response = await api.post('/vpn/test', {\n        configName\n      });\n      toast.success(`VPN connection test successful: ${response.data.ip} (${response.data.location})`);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error('Error testing VPN connection:', error);\n      toast.error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to test VPN connection');\n      throw error;\n    }\n  };\n  const uploadVpnConfig = async formData => {\n    try {\n      const response = await api.post('/vpn/configs', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      fetchVpnConfigs();\n      toast.success('VPN configuration uploaded successfully');\n      return response.data;\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error('Error uploading VPN config:', error);\n      toast.error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to upload VPN configuration');\n      throw error;\n    }\n  };\n  const deleteVpnConfig = async configName => {\n    try {\n      await api.delete(`/vpn/configs/${configName}`);\n      setVpnConfigs(prevConfigs => prevConfigs.filter(config => config.name !== configName));\n      toast.success('VPN configuration deleted successfully');\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      console.error('Error deleting VPN config:', error);\n      toast.error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || 'Failed to delete VPN configuration');\n      throw error;\n    }\n  };\n\n  // Get details for a specific box\n  const fetchBoxDetails = async boxId => {\n    try {\n      const response = await api.get(`/boxes/${boxId}`);\n      setSelectedBox(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching box details:', error);\n      toast.error('Failed to fetch box details');\n      throw error;\n    }\n  };\n\n  // Get details for a specific viewer\n  const fetchViewerDetails = async viewerId => {\n    try {\n      const response = await api.get(`/viewers/${viewerId}`);\n      setSelectedViewer(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching viewer details:', error);\n      toast.error('Failed to fetch viewer details');\n      throw error;\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    // Data\n    boxes,\n    viewers,\n    vpnConfigs,\n    selectedBox,\n    selectedViewer,\n    stats,\n    // Loading states\n    boxesLoading,\n    viewersLoading,\n    vpnLoading,\n    // Error states\n    boxesError,\n    viewersError,\n    vpnError,\n    // Actions\n    setSelectedBox,\n    setSelectedViewer,\n    fetchBoxes,\n    fetchViewers,\n    fetchVpnConfigs,\n    fetchBoxDetails,\n    fetchViewerDetails,\n    // Box operations\n    createBox,\n    updateBox,\n    deleteBox,\n    startBox,\n    stopBox,\n    // Viewer operations\n    updateViewer,\n    stopViewer,\n    takeViewerScreenshot,\n    // VPN operations\n    testVpnConnection,\n    uploadVpnConfig,\n    deleteVpnConfig\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 5\n  }, this);\n};\n_s2(AppProvider, \"fn6apU3200cKXSSUkW1gN8E+EIQ=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","toast","api","jsxDEV","_jsxDEV","AppContext","useAppContext","_s","AppProvider","children","_s2","boxes","setBoxes","boxesLoading","setBoxesLoading","boxesError","setBoxesError","viewers","setViewers","viewersLoading","setViewersLoading","viewersError","setViewersError","vpnConfigs","setVpnConfigs","vpnLoading","setVpnLoading","vpnError","setVpnError","selectedBox","setSelectedBox","selectedViewer","setSelectedViewer","stats","setStats","totalBoxes","activeBoxes","totalViewers","activeViewers","errorBoxes","errorViewers","initialFetchDone","boxesInterval","viewersInterval","updateStats","filter","box","status","length","viewer","fetchBoxes","response","get","data","error","console","message","fetchViewers","fetchVpnConfigs","fetchAllData","current","boxesResponse","viewersResponse","vpnResponse","Promise","all","catch","clearInterval","setInterval","createBox","boxData","post","prevBoxes","success","_error$response","_error$response$data","updateBox","boxId","put","map","_id","_error$response2","_error$response2$data","deleteBox","delete","_error$response3","_error$response3$data","startBox","info","setTimeout","_error$response4","_error$response4$data","stopBox","_error$response5","_error$response5$data","updateViewer","viewerId","viewerData","prevViewers","_error$response6","_error$response6$data","stopViewer","_error$response7","_error$response7$data","takeViewerScreenshot","fetchViewerDetails","_error$response8","_error$response8$data","testVpnConnection","configName","ip","location","_error$response9","_error$response9$data","uploadVpnConfig","formData","headers","_error$response10","_error$response10$dat","deleteVpnConfig","prevConfigs","config","name","_error$response11","_error$response11$dat","fetchBoxDetails","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/streamv3/frontend/src/context/AppContext.jsx"],"sourcesContent":["// src/context/AppContext.jsx\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport api from '../services/api';\n\n// Create context\nconst AppContext = createContext();\n\n// Custom hook to use the context\nexport const useAppContext = () => useContext(AppContext);\n\nexport const AppProvider = ({ children }) => {\n  // State for boxes\n  const [boxes, setBoxes] = useState([]);\n  const [boxesLoading, setBoxesLoading] = useState(true);\n  const [boxesError, setBoxesError] = useState(null);\n  \n  // State for viewers\n  const [viewers, setViewers] = useState([]);\n  const [viewersLoading, setViewersLoading] = useState(true);\n  const [viewersError, setViewersError] = useState(null);\n  \n  // State for VPN configs\n  const [vpnConfigs, setVpnConfigs] = useState([]);\n  const [vpnLoading, setVpnLoading] = useState(true);\n  const [vpnError, setVpnError] = useState(null);\n  \n  // Selected items\n  const [selectedBox, setSelectedBox] = useState(null);\n  const [selectedViewer, setSelectedViewer] = useState(null);\n  \n  // Stats\n  const [stats, setStats] = useState({\n    totalBoxes: 0,\n    activeBoxes: 0,\n    totalViewers: 0,\n    activeViewers: 0,\n    errorBoxes: 0,\n    errorViewers: 0,\n  });\n\n  // References for tracking initialization and preventing loops\n  const initialFetchDone = useRef(false);\n  const boxesInterval = useRef(null);\n  const viewersInterval = useRef(null);\n  \n  // Update stats based on current data\n  const updateStats = useCallback(() => {\n    const activeBoxes = boxes.filter(box => box.status === 'running').length;\n    const errorBoxes = boxes.filter(box => box.status === 'error').length;\n    const activeViewers = viewers.filter(viewer => viewer.status === 'running').length;\n    const errorViewers = viewers.filter(viewer => viewer.status === 'error').length;\n    \n    setStats({\n      totalBoxes: boxes.length,\n      activeBoxes,\n      totalViewers: viewers.length,\n      activeViewers,\n      errorBoxes,\n      errorViewers,\n    });\n  }, [boxes, viewers]);\n  \n  // Fetch all boxes - independent of viewers state\n  const fetchBoxes = useCallback(async () => {\n    try {\n      setBoxesLoading(true);\n      setBoxesError(null);\n      \n      const response = await api.get('/boxes');\n      setBoxes(response.data);\n    } catch (error) {\n      console.error('Error fetching boxes:', error);\n      setBoxesError(error.message || 'Failed to fetch boxes');\n      toast.error('Failed to fetch boxes');\n    } finally {\n      setBoxesLoading(false);\n    }\n  }, []); // No dependencies\n  \n  // Fetch all viewers - independent of boxes state\n  const fetchViewers = useCallback(async () => {\n    try {\n      setViewersLoading(true);\n      setViewersError(null);\n      \n      const response = await api.get('/viewers');\n      setViewers(response.data);\n    } catch (error) {\n      console.error('Error fetching viewers:', error);\n      setViewersError(error.message || 'Failed to fetch viewers');\n      toast.error('Failed to fetch viewers');\n    } finally {\n      setViewersLoading(false);\n    }\n  }, []); // No dependencies\n  \n  // Fetch all VPN configs\n  const fetchVpnConfigs = useCallback(async () => {\n    try {\n      setVpnLoading(true);\n      setVpnError(null);\n      \n      const response = await api.get('/vpn/configs');\n      setVpnConfigs(response.data);\n    } catch (error) {\n      console.error('Error fetching VPN configs:', error);\n      setVpnError(error.message || 'Failed to fetch VPN configurations');\n      toast.error('Failed to fetch VPN configurations');\n    } finally {\n      setVpnLoading(false);\n    }\n  }, []);\n  \n  // Initial data fetch - only run once\n  useEffect(() => {\n    const fetchAllData = async () => {\n      if (initialFetchDone.current) return;\n      \n      try {\n        // Fetch data in parallel\n        const [boxesResponse, viewersResponse, vpnResponse] = await Promise.all([\n          api.get('/boxes'),\n          api.get('/viewers'),\n          api.get('/vpn/configs').catch(error => {\n            console.error('Error fetching VPN configs:', error);\n            return { data: [] };\n          })\n        ]);\n        \n        // Update state\n        setBoxes(boxesResponse.data);\n        setViewers(viewersResponse.data);\n        setVpnConfigs(vpnResponse.data);\n        \n        // Reset loading states\n        setBoxesLoading(false);\n        setViewersLoading(false);\n        setVpnLoading(false);\n        \n        // Mark as initialized\n        initialFetchDone.current = true;\n      } catch (error) {\n        console.error('Error during initial data fetch:', error);\n        toast.error('Failed to load initial data');\n        setBoxesLoading(false);\n        setViewersLoading(false);\n        setVpnLoading(false);\n      }\n    };\n    \n    fetchAllData();\n    \n    return () => {\n      // Clear any pending intervals\n      if (boxesInterval.current) clearInterval(boxesInterval.current);\n      if (viewersInterval.current) clearInterval(viewersInterval.current);\n    };\n  }, []); // Run only once on mount\n  \n  // Update stats whenever boxes or viewers change\n  useEffect(() => {\n    updateStats();\n  }, [boxes, viewers, updateStats]);\n  \n  // Set up polling after initial data is loaded\n  useEffect(() => {\n    if (!initialFetchDone.current) return;\n    \n    // Only set up polling intervals if they don't exist yet\n    if (!boxesInterval.current) {\n      // Increased polling interval from 10 seconds to 30 seconds\n      boxesInterval.current = setInterval(fetchBoxes, 30000);\n    }\n    \n    if (!viewersInterval.current) {\n      // Increased polling interval from 10 seconds to 30 seconds\n      viewersInterval.current = setInterval(fetchViewers, 30000);\n    }\n    \n    return () => {\n      if (boxesInterval.current) clearInterval(boxesInterval.current);\n      if (viewersInterval.current) clearInterval(viewersInterval.current);\n    };\n  }, [fetchBoxes, fetchViewers, initialFetchDone.current]);\n  \n  // Box operations\n  const createBox = async (boxData) => {\n    try {\n      const response = await api.post('/boxes', boxData);\n      setBoxes(prevBoxes => [...prevBoxes, response.data]);\n      toast.success('Box created successfully');\n      return response.data;\n    } catch (error) {\n      console.error('Error creating box:', error);\n      toast.error(error.response?.data?.message || 'Failed to create box');\n      throw error;\n    }\n  };\n  \n  const updateBox = async (boxId, boxData) => {\n    try {\n      const response = await api.put(`/boxes/${boxId}`, boxData);\n      setBoxes(prevBoxes => \n        prevBoxes.map(box => (box._id === boxId ? response.data : box))\n      );\n      toast.success('Box updated successfully');\n      return response.data;\n    } catch (error) {\n      console.error('Error updating box:', error);\n      toast.error(error.response?.data?.message || 'Failed to update box');\n      throw error;\n    }\n  };\n  \n  const deleteBox = async (boxId) => {\n    try {\n      await api.delete(`/boxes/${boxId}`);\n      setBoxes(prevBoxes => prevBoxes.filter(box => box._id !== boxId));\n      if (selectedBox?._id === boxId) {\n        setSelectedBox(null);\n      }\n      toast.success('Box deleted successfully');\n    } catch (error) {\n      console.error('Error deleting box:', error);\n      toast.error(error.response?.data?.message || 'Failed to delete box');\n      throw error;\n    }\n  };\n  \n  const startBox = async (boxId) => {\n    try {\n      const response = await api.post(`/boxes/${boxId}/start`);\n      \n      // Update the box status immediately to starting\n      setBoxes(prevBoxes => \n        prevBoxes.map(box => \n          box._id === boxId \n            ? { ...box, status: 'starting' } \n            : box\n        )\n      );\n      \n      toast.info('Box is starting...');\n      \n      // Update the selected box if it's the one being started\n      if (selectedBox?._id === boxId) {\n        setSelectedBox({ ...selectedBox, status: 'starting' });\n      }\n      \n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchBoxes();\n        fetchViewers();\n      }, 3000);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error starting box:', error);\n      toast.error(error.response?.data?.message || 'Failed to start box');\n      throw error;\n    }\n  };\n  \n  const stopBox = async (boxId) => {\n    try {\n      const response = await api.post(`/boxes/${boxId}/stop`);\n      \n      // Update the box status immediately to stopping\n      setBoxes(prevBoxes => \n        prevBoxes.map(box => \n          box._id === boxId \n            ? { ...box, status: 'stopping' } \n            : box\n        )\n      );\n      \n      toast.info('Box is stopping...');\n      \n      // Update the selected box if it's the one being stopped\n      if (selectedBox?._id === boxId) {\n        setSelectedBox({ ...selectedBox, status: 'stopping' });\n      }\n      \n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchBoxes();\n        fetchViewers();\n      }, 3000);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error stopping box:', error);\n      toast.error(error.response?.data?.message || 'Failed to stop box');\n      throw error;\n    }\n  };\n  \n  // Viewer operations\n  const updateViewer = async (viewerId, viewerData) => {\n    try {\n      const response = await api.put(`/viewers/${viewerId}`, viewerData);\n      \n      setViewers(prevViewers => \n        prevViewers.map(viewer => \n          viewer._id === viewerId ? response.data : viewer\n        )\n      );\n      \n      // Update the selected viewer if it's the one being updated\n      if (selectedViewer?._id === viewerId) {\n        setSelectedViewer(response.data);\n      }\n      \n      toast.success('Viewer updated successfully');\n      \n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchViewers();\n      }, 3000);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error updating viewer:', error);\n      toast.error(error.response?.data?.message || 'Failed to update viewer');\n      throw error;\n    }\n  };\n  \n  const stopViewer = async (viewerId) => {\n    try {\n      const response = await api.post(`/viewers/${viewerId}/stop`);\n      \n      // Update the viewer status immediately to stopping\n      setViewers(prevViewers => \n        prevViewers.map(viewer => \n          viewer._id === viewerId \n            ? { ...viewer, status: 'stopping' } \n            : viewer\n        )\n      );\n      \n      toast.info('Viewer is stopping...');\n      \n      // Update the selected viewer if it's the one being stopped\n      if (selectedViewer?._id === viewerId) {\n        setSelectedViewer({ ...selectedViewer, status: 'stopping' });\n      }\n      \n      // Refresh after a short delay to get updated status\n      setTimeout(() => {\n        fetchViewers();\n      }, 3000);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error stopping viewer:', error);\n      toast.error(error.response?.data?.message || 'Failed to stop viewer');\n      throw error;\n    }\n  };\n  \n  const takeViewerScreenshot = async (viewerId) => {\n    try {\n      const response = await api.post(`/viewers/${viewerId}/screenshot`);\n      \n      toast.success('Screenshot taken successfully');\n      \n      // Update the selected viewer if it's the one being screenshotted\n      if (selectedViewer?._id === viewerId) {\n        fetchViewerDetails(viewerId);\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error taking viewer screenshot:', error);\n      toast.error(error.response?.data?.message || 'Failed to take screenshot');\n      throw error;\n    }\n  };\n  \n  // VPN operations\n  const testVpnConnection = async (configName) => {\n    try {\n      const response = await api.post('/vpn/test', { configName });\n      toast.success(`VPN connection test successful: ${response.data.ip} (${response.data.location})`);\n      return response.data;\n    } catch (error) {\n      console.error('Error testing VPN connection:', error);\n      toast.error(error.response?.data?.message || 'Failed to test VPN connection');\n      throw error;\n    }\n  };\n  \n  const uploadVpnConfig = async (formData) => {\n    try {\n      const response = await api.post('/vpn/configs', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      \n      fetchVpnConfigs();\n      toast.success('VPN configuration uploaded successfully');\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading VPN config:', error);\n      toast.error(error.response?.data?.message || 'Failed to upload VPN configuration');\n      throw error;\n    }\n  };\n  \n  const deleteVpnConfig = async (configName) => {\n    try {\n      await api.delete(`/vpn/configs/${configName}`);\n      setVpnConfigs(prevConfigs => \n        prevConfigs.filter(config => config.name !== configName)\n      );\n      toast.success('VPN configuration deleted successfully');\n    } catch (error) {\n      console.error('Error deleting VPN config:', error);\n      toast.error(error.response?.data?.message || 'Failed to delete VPN configuration');\n      throw error;\n    }\n  };\n  \n  // Get details for a specific box\n  const fetchBoxDetails = async (boxId) => {\n    try {\n      const response = await api.get(`/boxes/${boxId}`);\n      setSelectedBox(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching box details:', error);\n      toast.error('Failed to fetch box details');\n      throw error;\n    }\n  };\n  \n  // Get details for a specific viewer\n  const fetchViewerDetails = async (viewerId) => {\n    try {\n      const response = await api.get(`/viewers/${viewerId}`);\n      setSelectedViewer(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching viewer details:', error);\n      toast.error('Failed to fetch viewer details');\n      throw error;\n    }\n  };\n  \n  // Context value\n  const contextValue = {\n    // Data\n    boxes,\n    viewers,\n    vpnConfigs,\n    selectedBox,\n    selectedViewer,\n    stats,\n    \n    // Loading states\n    boxesLoading,\n    viewersLoading,\n    vpnLoading,\n    \n    // Error states\n    boxesError,\n    viewersError,\n    vpnError,\n    \n    // Actions\n    setSelectedBox,\n    setSelectedViewer,\n    fetchBoxes,\n    fetchViewers,\n    fetchVpnConfigs,\n    fetchBoxDetails,\n    fetchViewerDetails,\n    \n    // Box operations\n    createBox,\n    updateBox,\n    deleteBox,\n    startBox,\n    stopBox,\n    \n    // Viewer operations\n    updateViewer,\n    stopViewer,\n    takeViewerScreenshot,\n    \n    // VPN operations\n    testVpnConnection,\n    uploadVpnConfig,\n    deleteVpnConfig,\n  };\n  \n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}