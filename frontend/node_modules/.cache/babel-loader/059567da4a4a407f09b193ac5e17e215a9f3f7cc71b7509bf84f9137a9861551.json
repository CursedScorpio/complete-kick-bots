{"ast":null,"code":"// src/services/viewerService.js\nimport api from './api';\n\n// Viewer service for specific viewer-related API calls\nconst viewerService = {\n  // Get all viewers\n  getAllViewers: async () => {\n    const response = await api.get('/viewers');\n    return response.data;\n  },\n  // Get viewer by ID\n  getViewerById: async viewerId => {\n    const response = await api.get(`/viewers/${viewerId}`);\n    return response.data;\n  },\n  // Update a viewer\n  updateViewer: async (viewerId, viewerData) => {\n    const response = await api.put(`/viewers/${viewerId}`, viewerData);\n    return response.data;\n  },\n  // Stop a viewer\n  stopViewer: async viewerId => {\n    const response = await api.post(`/viewers/${viewerId}/stop`);\n    return response.data;\n  },\n  // Get viewer status\n  getViewerStatus: async viewerId => {\n    const response = await api.get(`/viewers/${viewerId}/status`);\n    return response.data;\n  },\n  // Take a screenshot\n  takeScreenshot: async viewerId => {\n    const response = await api.post(`/viewers/${viewerId}/screenshot`);\n    return response.data;\n  },\n  // Get viewer logs\n  getViewerLogs: async viewerId => {\n    const response = await api.get(`/viewers/${viewerId}/logs`);\n    return response.data;\n  },\n  // Poll viewer status (with automatic reconnection)\n  pollViewerStatus: (viewerId, callback, interval = 15000) => {\n    let isPolling = true;\n    let timeoutId = null;\n    const poll = async () => {\n      if (!isPolling) return;\n      try {\n        const data = await viewerService.getViewerStatus(viewerId);\n        callback(null, data);\n      } catch (error) {\n        callback(error, null);\n      }\n\n      // Only schedule the next poll if we're still polling\n      if (isPolling) {\n        // Clear any existing timeout to prevent multiple polling\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        // Set a new timeout with the proper interval\n        timeoutId = setTimeout(poll, interval);\n      }\n    };\n\n    // Start polling with the initial call\n    poll();\n\n    // Return function to stop polling\n    return () => {\n      isPolling = false;\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n    };\n  },\n  // Get screenshot URL\n  getScreenshotUrl: filename => {\n    return `${api.defaults.baseURL}/viewers/screenshots/${filename}`;\n  }\n};\nexport default viewerService;","map":{"version":3,"names":["api","viewerService","getAllViewers","response","get","data","getViewerById","viewerId","updateViewer","viewerData","put","stopViewer","post","getViewerStatus","takeScreenshot","getViewerLogs","pollViewerStatus","callback","interval","isPolling","timeoutId","poll","error","clearTimeout","setTimeout","getScreenshotUrl","filename","defaults","baseURL"],"sources":["/home/streamv3/frontend/src/services/viewerService.js"],"sourcesContent":["// src/services/viewerService.js\nimport api from './api';\n\n// Viewer service for specific viewer-related API calls\nconst viewerService = {\n  // Get all viewers\n  getAllViewers: async () => {\n    const response = await api.get('/viewers');\n    return response.data;\n  },\n  \n  // Get viewer by ID\n  getViewerById: async (viewerId) => {\n    const response = await api.get(`/viewers/${viewerId}`);\n    return response.data;\n  },\n  \n  // Update a viewer\n  updateViewer: async (viewerId, viewerData) => {\n    const response = await api.put(`/viewers/${viewerId}`, viewerData);\n    return response.data;\n  },\n  \n  // Stop a viewer\n  stopViewer: async (viewerId) => {\n    const response = await api.post(`/viewers/${viewerId}/stop`);\n    return response.data;\n  },\n  \n  // Get viewer status\n  getViewerStatus: async (viewerId) => {\n    const response = await api.get(`/viewers/${viewerId}/status`);\n    return response.data;\n  },\n  \n  // Take a screenshot\n  takeScreenshot: async (viewerId) => {\n    const response = await api.post(`/viewers/${viewerId}/screenshot`);\n    return response.data;\n  },\n  \n  // Get viewer logs\n  getViewerLogs: async (viewerId) => {\n    const response = await api.get(`/viewers/${viewerId}/logs`);\n    return response.data;\n  },\n  \n  // Poll viewer status (with automatic reconnection)\n  pollViewerStatus: (viewerId, callback, interval = 15000) => {\n    let isPolling = true;\n    let timeoutId = null;\n    \n    const poll = async () => {\n      if (!isPolling) return;\n      \n      try {\n        const data = await viewerService.getViewerStatus(viewerId);\n        callback(null, data);\n      } catch (error) {\n        callback(error, null);\n      }\n      \n      // Only schedule the next poll if we're still polling\n      if (isPolling) {\n        // Clear any existing timeout to prevent multiple polling\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        // Set a new timeout with the proper interval\n        timeoutId = setTimeout(poll, interval);\n      }\n    };\n    \n    // Start polling with the initial call\n    poll();\n    \n    // Return function to stop polling\n    return () => {\n      isPolling = false;\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n    };\n  },\n  \n  // Get screenshot URL\n  getScreenshotUrl: (filename) => {\n    return `${api.defaults.baseURL}/viewers/screenshots/${filename}`;\n  },\n};\n\nexport default viewerService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,aAAa,GAAG;EACpB;EACAC,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,aAAa,EAAE,MAAOC,QAAQ,IAAK;IACjC,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,YAAYG,QAAQ,EAAE,CAAC;IACtD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,YAAY,EAAE,MAAAA,CAAOD,QAAQ,EAAEE,UAAU,KAAK;IAC5C,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,YAAYH,QAAQ,EAAE,EAAEE,UAAU,CAAC;IAClE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,UAAU,EAAE,MAAOJ,QAAQ,IAAK;IAC9B,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACY,IAAI,CAAC,YAAYL,QAAQ,OAAO,CAAC;IAC5D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,eAAe,EAAE,MAAON,QAAQ,IAAK;IACnC,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,YAAYG,QAAQ,SAAS,CAAC;IAC7D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAS,cAAc,EAAE,MAAOP,QAAQ,IAAK;IAClC,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACY,IAAI,CAAC,YAAYL,QAAQ,aAAa,CAAC;IAClE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAU,aAAa,EAAE,MAAOR,QAAQ,IAAK;IACjC,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,YAAYG,QAAQ,OAAO,CAAC;IAC3D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAW,gBAAgB,EAAEA,CAACT,QAAQ,EAAEU,QAAQ,EAAEC,QAAQ,GAAG,KAAK,KAAK;IAC1D,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIC,SAAS,GAAG,IAAI;IAEpB,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;MACvB,IAAI,CAACF,SAAS,EAAE;MAEhB,IAAI;QACF,MAAMd,IAAI,GAAG,MAAMJ,aAAa,CAACY,eAAe,CAACN,QAAQ,CAAC;QAC1DU,QAAQ,CAAC,IAAI,EAAEZ,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdL,QAAQ,CAACK,KAAK,EAAE,IAAI,CAAC;MACvB;;MAEA;MACA,IAAIH,SAAS,EAAE;QACb;QACA,IAAIC,SAAS,EAAE;UACbG,YAAY,CAACH,SAAS,CAAC;QACzB;QACA;QACAA,SAAS,GAAGI,UAAU,CAACH,IAAI,EAAEH,QAAQ,CAAC;MACxC;IACF,CAAC;;IAED;IACAG,IAAI,CAAC,CAAC;;IAEN;IACA,OAAO,MAAM;MACXF,SAAS,GAAG,KAAK;MACjB,IAAIC,SAAS,EAAE;QACbG,YAAY,CAACH,SAAS,CAAC;QACvBA,SAAS,GAAG,IAAI;MAClB;IACF,CAAC;EACH,CAAC;EAED;EACAK,gBAAgB,EAAGC,QAAQ,IAAK;IAC9B,OAAO,GAAG1B,GAAG,CAAC2B,QAAQ,CAACC,OAAO,wBAAwBF,QAAQ,EAAE;EAClE;AACF,CAAC;AAED,eAAezB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}